xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Spring Boot
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

===================================================
Getting Started
===================================================
Download from https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started-installing-spring-boot.html#getting-started-installing-the-cli
Run java -version and check if JDK version is > 1.8
Create SPRING_HOME environment variable to the folder and add %SPRING_HOME%/bin to PATH
Run spring --version and check if it's ok.
Create project by running: spring init --build maven --groupId com.redhat.examples --version 1.0 --java-version 1.8 --dependencies web --name hola-springboot hola-springboot

===================================================
Running the project
===================================================
Go to the project directory (hola-springboot) and run mvn spring-boot:run
Go to http://localhost:8080 

===================================================
How to Run This Outside of Maven?
===================================================

mvn clean package
java -jar target/hola-springboot-1.0.jar

mvn clean install spring-boot:run -Dserver.port=9090

===================================================
Run backend project with embedded Jetty
===================================================
mvn clean install jetty:run


xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
The Dropwizard Stack
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

Dropwizard provides some very intuitive abstractions on top of
these powerful libraries to make it very easy to write productionready
microservices:
• Jetty for the servlet container
• Jersey for the REST/JAX-RS implementation
• Jackson for JSON serialization/deserialization
• Hibernate Validator
• Guava
• Metrics
• Logback + SLF4J
• JDBI for dealing with databases

===================================================
Getting Started
===================================================
 mvn -B archetype:generate -DarchetypeGroupId=io.dropwizard.archetypes -DarchetypeArtifactId=java-simple -DarchetypeVersion=0.9.2 -DgroupId=com.redhat.examples.dropwizard -DartifactId=hola-dropwizard -Dversion=1.0 -Dname=HolaDropwizard
 
 Enter the directory created and run mvn clean install
 
===================================================
Running Dropwizard like Spring Boot
===================================================
One plug-in we do want to add is the exec-maven-plugin. With
Spring Boot we were able to just run our microservice with mvn
spring-boot:run. We want to be able to do the same thing with our
Dropwizard application, so let’s add the following plug-in within the
<build> section of the pom.xml

<plugin>
	<groupId>org.codehaus.mojo</groupId>
	<artifactId>exec-maven-plugin</artifactId>
	<configuration>
		<mainClass>
		com.redhat.examples.dropwizard.HolaDropwizardApplication
		</mainClass>
		<arguments>
			<argument>server</argument>
		</arguments>
	</configuration>
</plugin>

Now we can execute our application from the command line like
this:
$ mvn exec:java

App: http://localhost:8080
Adm: http://localhost:8081

To run: mvn clean package exec:java

When we go to the endpoint at http://localhost:8080/api/hola we should see the result.

===================================================
Externalize Configuration
===================================================
With Dropwizard, we only have the YAML option.

let’s create a file in the root of our project called conf/application.
yml (note, you’ll need to create the conf directory if it doesn’t
exist)

# configurations for our sayingFactory
helloapp:
	saying: Hola Dropwizard de

What if we wanted to be able to override it based on some environment conditions?
We could override it by passing in a Java system variable like
this -Ddw.helloapp.saying=Guten Tag. Note that the dw.* part of
the system property name is significant; it tells Dropwizard to apply
the value to one of the configuration settings of our application.

What if we wanted to override the property based on the value of an
OS environment variable? That would look like Example 3-8.
Example 3-8. conf/application.yml

# configurations for our sayingFactory
helloapp:
	saying:${HELLOAPP_SAYING:-Guten Tag aus}
	
Let’s run our application. To do this, let’s update our pom.xml to pass
our new conf/application.yml file

<mainClass>
	com.redhat.examples.dropwizard.HolaDropwizardApplication
</mainClass>
<arguments>
	<argument>server</argument>
	<argument>conf/application.yml</argument>
</arguments>

export HELLOAPP_SAYING='Hello Dropwizard from'

===================================================
How to Run This Outside of Maven?
===================================================
Dropwizard packages our microservice as a single executable uber
JAR. All we have to do is build our application and run it like this:
$ mvn clean package
$ java -jar target/hola-dropwizard-1.0.jar server conf/application.yml

===================================================
Calling Another Service
===================================================

				  (/api/greeting)         (/api/backend)
Browser -------->  Dropwizard    --------> Backend
        <--------  Microservice  <--------

		
mvn clean install exec:java -Ddw.server.applicationConnectors[0].port=9090